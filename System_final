import RPi.GPIO as GPIO
import time
import random

# GPIO 핀 정의
KEYPAD_PINS = [6, 12, 13, 16, 19, 20, 26, 21]  # Keypad PB4 ~ PB1, PB8 ~ PB5 GPIO 핀
LED_PINS = [4, 17, 18, 27, 22, 23, 24, 25]     # LED1 ~ LED8 GPIO 핀

# 사용자 정의 매핑
KEYPAD_TO_LED_MAP = {
    4: 1,  # PB4 → LED1
    3: 2,  # PB3 → LED2
    2: 3,  # PB2 → LED3
    1: 4,  # PB1 → LED4
    8: 5,  # PB8 → LED5
    7: 6,  # PB7 → LED6
    6: 7,  # PB6 → LED7
    5: 8,  # PB5 → LED8
}

# LED 상태 정의
LED_ON = GPIO.HIGH
LED_OFF = GPIO.LOW

def setup_pins():
    """GPIO 핀 초기화"""
    GPIO.setmode(GPIO.BCM)
    # LED 핀 출력 설정
    for pin in LED_PINS:
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, LED_OFF)

    # 키패드 핀 입력 설정
    for pin in KEYPAD_PINS:
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

def blink_led_sequence(led_sequence):
    """LED 순서대로 점등"""
    for led_num in led_sequence:
        GPIO.output(LED_PINS[led_num - 1], LED_ON)
        time.sleep(1)
        GPIO.output(LED_PINS[led_num - 1], LED_OFF)
        time.sleep(0.5)

def get_user_input(expected_length):
    """사용자 입력 받아 순서 생성"""
    input_sequence = []
    while len(input_sequence) < expected_length:
        for i, pin in enumerate(KEYPAD_PINS):
            if not GPIO.input(pin):  # 버튼이 눌렸는지 확인
                key_number = i + 1
                led_number = KEYPAD_TO_LED_MAP.get(key_number, None)
                if led_number is not None and led_number not in input_sequence:
                    input_sequence.append(led_number)
                    print(f"입력: PB{key_number}, 매핑된 LED 번호: {led_number}")
                    time.sleep(0.3)  # 디바운싱
    return input_sequence

def flash_all_leds():
    """LED 전체 깜빡이기"""
    for _ in range(2):  # 2번 깜빡이기
        for pin in LED_PINS:
            GPIO.output(pin, LED_ON)
        time.sleep(0.5)
        for pin in LED_PINS:
            GPIO.output(pin, LED_OFF)
        time.sleep(0.5)

def main():
    setup_pins()
    current_led_count = 1  # 초기 LED 개수
    max_led_count = len(LED_PINS)
    score = 0  # 초기 점수

    try:
        while True:
            # 1. LED 순서 생성
            led_sequence = random.sample(range(1, max_led_count + 1), current_led_count)
            print(f"LED 순서: {led_sequence}")

            # 2. LED 점등
            blink_led_sequence(led_sequence)

            # 3. 사용자 입력 받기
            print("순서에 맞게 버튼을 누르세요!")
            user_input = get_user_input(len(led_sequence))
            print(f"사용자 입력: {user_input}")

            # 4. 순서 검증
            if user_input == led_sequence:
                score += 1  # 정답 시 점수 증가
                print(f"정답입니다! 현재 점수: {score}")
                flash_all_leds()
                if current_led_count < max_led_count:
                    current_led_count += 1  # 성공 시 LED 개수 증가
            else:
                print("틀렸습니다! 최종 점수: {score}")
                break

    except KeyboardInterrupt:
        print("프로그램 종료")
    finally:
        GPIO.cleanup()

if __name__ == "__main__":
    main()
